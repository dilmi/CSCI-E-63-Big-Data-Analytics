The MapReduce library in the user program first shards the input
files into M pieces of typically 16 megabytes to 64 megabytes
(MB) per piece. It then starts up many copies of the program on a
cluster of machines.
One of the programs is special: the Master. The rest are workers
are assigned work by the Master. There are M map tasks and R
reduce tasks to assign. The master picks idle workers and assigns
each one a map task or a reduce task.
A worker who is assigned a map task reads the contents of the
corresponding input shard. It parses key/value pairs out of the
input data and passes each pair to the user-defined Map function.
The intermediate key/value pairs produced by the Map function
are buffered in memory.
Periodically, the buffered pairs are written to local disk,
partitioned into R regions by the partitioning function. The
locations of these buffered pairs on the local disk are passed back
to the master, who is responsible for forwarding these locations to
the reduce workers.
When a reduce worker is notified by the Master about these
locations, it uses remote procedure calls to read the buffered
data from the local disks of the map workers. When a reduce
worker has read all intermediate data, it sorts it by the
intermediate keys so that all occurrences of the same key are
grouped together. If the amount of intermediate data is too large
to fit in memory, an external sort is used.
The reduce worker iterates over the sorted intermediate data and
for each unique intermediate key encountered, it passes the key
and the corresponding set of intermediate values to the user's
Reduce function. The output of the Reduce function is appended
to a final output file for this reduce partition.
When all map tasks and reduce tasks have been completed, the
master wakes up the user program. At this point, the MapReduce
call in the user program returns back to the user code.
After successful completion, the output of the MapReduce execution
is available in the R output files
